{"name": "test_get_specific_post[99-10-provident]", "status": "failed", "statusDetails": {"message": "AssertionError: 预期标题包含 'provident', 实际为 'temporibus sit alias delectus eligendi possimus magni'\nassert 'provident' in 'temporibus sit alias delectus eligendi possimus magni'", "trace": "base_url = 'https://jsonplaceholder.typicode.com', post_id = 99, expected_user_id = 10, expected_title_part = 'provident'\n\n    @pytest.mark.regression # 标记为回归测试\n    @pytest.mark.parametrize(\"post_id, expected_user_id, expected_title_part\", [\n        (1, 1, \"sunt aut facere\"), # 测试帖子 ID 1\n        (10, 1, \"optio molestias\"), # 测试帖子 ID 10\n        (50, 5, \"repellendus qui\"), # 测试帖子 ID 50\n        pytest.param(99, 10, \"provident\", marks=pytest.mark.smoke), # 也可以在参数级别应用标记\n    ])\n    def test_get_specific_post(base_url, post_id, expected_user_id, expected_title_part):\n        \"\"\"使用参数化测试获取特定帖子的详情\"\"\"\n        print(f\"\\n[Thread: {threading.current_thread().name}] Running test_get_specific_post with post_id={post_id}\")\n        response = requests.get(f\"{base_url}/posts/{post_id}\")\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data, dict)\n        assert data[\"id\"] == post_id, f\"预期帖子 ID 为 {post_id}, 实际为 {data.get('id')}\"\n        assert data[\"userId\"] == expected_user_id, f\"预期用户 ID 为 {expected_user_id}, 实际为 {data.get('userId')}\"\n>       assert expected_title_part in data[\"title\"], f\"预期标题包含 '{expected_title_part}', 实际为 '{data.get('title')}'\"\nE       AssertionError: 预期标题包含 'provident', 实际为 'temporibus sit alias delectus eligendi possimus magni'\nE       assert 'provident' in 'temporibus sit alias delectus eligendi possimus magni'\n\ntest_api_posts.py:64: AssertionError"}, "description": "使用参数化测试获取特定帖子的详情", "attachments": [{"name": "stdout", "source": "c48e8861-fda6-425e-ac10-da430fe8d6e1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "post_id", "value": "99"}, {"name": "expected_user_id", "value": "10"}, {"name": "expected_title_part", "value": "'provident'"}], "start": 1745633383293, "stop": 1745633383901, "uuid": "ed99e1c7-82b9-45c5-897c-0574ff787a56", "historyId": "d929ac0ecf70cdb9b0aff3417c6116a3", "testCaseId": "1ab46d1a1e091645d8f80e6a13d73611", "fullName": "test_api_posts#test_get_specific_post", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "smoke"}, {"name": "suite", "value": "test_api_posts"}, {"name": "host", "value": "192.168.1.5"}, {"name": "thread", "value": "60617-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api_posts"}]}